/* 
This version:
 - solenoid timer (different intervals for on vs off)
 - water pressure input
 - pump timer (not used)
 
Next version:
 - pump timer determined by water pressure
 */
 

boolean runViaPython = true;   // Switch to determine whether running via python (to gcloud), or run via timers set below



int pumpPin = 2;       // The output pin on the Arduino used for the pump
int solenoidPin = 4;   // The output pin on the Arduino used for the solenoid

int pumpState = HIGH;         // Set the Pump state to HIGH
int solenoidState = LOW;     // Set the Solenoid state to HIGH


int pressurePin = A0;  // The input pin on the Arduino used for the water pressure sensor
int tempAirPin = A1;      // The input pin on the Arduino used for the air temperature sensor
int phPin = A4;			// The input pin on the Arduino used for the ph sensor
int ecPin = A5;			// The input pin on the Arduino used for the ph sensor

int pressureVal = 0;        // Water pressure sensor variable
int tempAirVal = 0;			// Air Temp sensor variable
int phVal = 0;				// PH sensor variable
float ecVal = 0.0;				// EC sensor variable

unsigned long oldSolenoidTime = 0;  // used to store last time solenoid state was changed
unsigned long oldPumpTime = 0;  // used to store last time pump state was changed

unsigned long oldPressureTime = 0;  // used to store last time pressure was checked
unsigned long oldTempAirTime = 0;  // used to store last time the air temperature was checked
unsigned long oldPhTime = 0;  // used to store last time PH was measured
unsigned long oldEcTime = 0;  // used to store last time EC was measured


// Set intervals
const long solenoidIntervalOn = 5000;   // change solenoid state every X milliseconds (1000 = 1 second)
const long solenoidIntervalOff = 300000;   // change solenoid state every X milliseconds (300000 = 5 minutes)
const long pumpInterval = 10000;   // change pump state every X milliseconds (1000 = 1 second)
const long pressureReadInterval = 5000;   // read pressure sensor every X milliseconds (1000 = 1 second)
const long tempAirReadInterval = 10000;   // read air temperature sensor every X milliseconds (1000 = 1 second)
const long phReadInterval = 10000;   // read PH sensor every X milliseconds (1000 = 1 second)
const long ecReadInterval = 10000;   // read EC sensor every X milliseconds (1000 = 1 second)

long solenoidInterval = solenoidIntervalOn;   // set first interval to ON

char ch = 0;           // Serial Input string
char sendBuffer[32];  // set up string for output to Raspberry Pi
String inputString = "";
boolean stringComplete=false;

// Gravity TDS Library
#include <EEPROM.h>
#include "GravityTDS.h"
GravityTDS gravityTds;
float tempTDS = 25,tdsValue = 0;


void setup() {
  // put your setup code here, to run once:

  Serial.begin(9600);
  
  // Gravity TDS Library
  gravityTds.setPin(ecPin);
  gravityTds.setAref(5.0);  //reference voltage on ADC, default 5.0V on Arduino UNO
  gravityTds.setAdcRange(1024);  //1024 for 10bit ADC;4096 for 12bit ADC
  gravityTds.begin();  //initialization

  // OUTPUTS
  pinMode(pumpPin, OUTPUT);   // Sets the pump pin as an output
  pinMode(solenoidPin, OUTPUT);   // Sets the solenoid pin as an output
  pinMode(LED_BUILTIN, OUTPUT);   // Set up LED pin as an output
  
}

void loop() {
  // put your main code here, to run repeatedly:

  // SEND TELEMETRY (i.e. IoT sensor readings) TO GOOGLE CLOUD:
  if (Serial.available()){
   ch = Serial.read();
   if (ch == '1'){
     sendTelemetry();
    };
  };

  unsigned long currentTime = millis();    // Get the current time
    
  // SOLENOID:  If current time is greater than interval
  if (currentTime > (oldSolenoidTime + solenoidInterval)){
    
    // Save new time:
    oldSolenoidTime = currentTime;

    // Switch state:
    solenoidState = !solenoidState;

    // Set next interval:
    if (solenoidState == LOW){
      solenoidInterval = solenoidIntervalOn;
    } else {
      solenoidInterval = solenoidIntervalOff;
    }
    
    // Set digital pin state:
    digitalWrite(solenoidPin, solenoidState);
    digitalWrite(LED_BUILTIN, solenoidState);   // TEMP - also change LED on arduino
    
    // Write to log
    if (runViaPython==false){
      Serial.print("solenoidState: "); 
      Serial.println(solenoidState);
    };
    
  };

  // PRESSURE SENSOR:  If current time has passed the interval
  if (currentTime > (oldPressureTime + pressureReadInterval)){
    
    // Save new time:
    oldPressureTime = currentTime;

    // Read analogue value:
    pressureVal = analogRead(pressurePin);

    float voltage = (pressureVal*5.0)/1024.0;                          // Convert reading to voltage
    float pressure_pascal = (3.0*((float)voltage-0.475))*1000000.0;   // Convert to pascal
    float pressure_bar = pressure_pascal/10e5;                        // Convert to bar
    int pressure_psi = pressure_bar*14.503773773;                   // Convert to PSI
  
    // Print pressure sensor values
    if (runViaPython==false){
      Serial.print("Pressure Sensor Value: ");
      Serial.print(pressureVal);
      Serial.print(";  Pressure = ");
      Serial.print(pressure_psi);
      Serial.println(" PSI");
    };
  };
  
  // AIR TEMP SENSOR:  If current time has passed the interval
  if (currentTime > (oldTempAirTime + tempAirReadInterval)){
    
    // Save new time:
    oldTempAirTime = currentTime;

    // Read analogue value:
    tempAirVal = analogRead(tempAirPin);

    float voltageTempAir = ((float)tempAirVal*5.0)/1024;   // Convert reading to voltage
    float tempAirCelcius = (voltageTempAir-0.5)*100;       // Convert to celcius
  
    // Print pressure sensor values
    if (runViaPython==false){
      Serial.print("AirTemp Sensor Value: ");
      Serial.print(tempAirVal);
      Serial.print(";  Celsius = ");
      Serial.print(tempAirCelcius);
      Serial.println(" C");  
    };
  };
  
  // TDS/EC SENSOR:  If current time has passed the interval
  if (currentTime > (oldEcTime + ecReadInterval)){
    
    // Save new time:
    oldEcTime = currentTime;

    //tempTDS = readTemperature();  //add your temperature sensor and read it
    gravityTds.setTemperature(tempTDS);  // set the temperature and execute temperature compensation
    gravityTds.update();  //sample and calculate
    tdsValue = gravityTds.getTdsValue();  // then get the value
    ecVal = tdsValue*2/1000; // get to EC value
    
    // Print out values:
    if (runViaPython==false){
      Serial.print("EC value: ");
      Serial.print(ecVal);
      Serial.println(" mS/cm");
    };
	 
  };

  /*
  // PUMP:  If current time is greater than interval
  if (currentTime > (oldPumpTime + pumpInterval)){
    
    // Save new time:
    oldPumpTime = currentTime;

    // Switch state:
    pumpState = !pumpState;
    
    // Set digital pin state:
    digitalWrite(pumpPin, pumpState);
    
    // Write to log
    Serial.print("pumpState: ");
    Serial.println(pumpState);
  };
  */

  
  

};



void sendTelemetry(){
  
      // Read analogue values:
    pressureVal = analogRead(pressurePin);

    /*
    float voltage = (pressureVal*5.0)/1024.0;                          // Convert reading to voltage
    float pressure_pascal = (3.0*((float)voltage-0.475))*1000000.0;   // Convert to pascal
    float pressure_bar = pressure_pascal/10e5;                        // Convert to bar
    int pressure_psi = pressure_bar*14.503773773;                   // Convert to PSI
    */
    // Compile string to send to Raspberry PI
    //memset(sendBuffer, 0, sizeof(sendBuffer));
    //sprintf(sendBuffer, "X psi:%d temp:%d ph:%d ec:%d z:%d", pressure_psi, 0, 0, 0, 0);
    //sprintf(sendBuffer, "X p:%d t:%d", pressure_psi, 0);
    
    Serial.print("X p:");
    Serial.println(pressureVal);
    
    /*
    sprintf(sendBuffer, "X p:%d", pressureVal);
    Serial.println(sendBuffer);
    */
}
